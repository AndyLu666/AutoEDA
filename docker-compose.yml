version: '3.8'

services:
  mcp-agent-client:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE:-https://api.openai.com/v1}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - MCP_SERVER_HOST=eda-servers
      - SYNTH_SERVER_PORT=13333
      - UNIFIED_PLACEMENT_SERVER_PORT=13340
      - CTS_SERVER_PORT=13338
      - UNIFIED_ROUTE_SAVE_SERVER_PORT=13341
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_ROOT=/app/logs
    volumes:
      - ./designs:/app/designs:ro
      - ./config:/app/config:ro
      - ./libraries:/app/libraries:ro
      - ./logs:/app/logs
      - ./deliverables:/app/deliverables
      - ./exp_v1:/app/exp_v1:ro
    networks:
      - mcp-network
    depends_on:
      eda-servers:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mcp-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
    # Note: MCP server runs in stdio mode for Claude Desktop integration
    # No port exposure needed - communication happens via stdio
    environment:
      - MCP_SERVER_HOST=eda-servers
      - SYNTH_SERVER_PORT=13333
      - UNIFIED_PLACEMENT_SERVER_PORT=13340
      - CTS_SERVER_PORT=13338
      - UNIFIED_ROUTE_SAVE_SERVER_PORT=13341
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_ROOT=/app/logs
      - PYTHONPATH=/app
    volumes:
      - ./designs:/app/designs:ro
      - ./config:/app/config:ro
      - ./libraries:/app/libraries:ro
      - ./logs:/app/logs
      - ./deliverables:/app/deliverables
      - ./exp_v1:/app/exp_v1:ro
      - ./server/mcp:/app/server/mcp:ro
      - ./simple_mcp_client.py:/app/simple_mcp_client.py:ro
      - ./mcp_agent_client.py:/app/mcp_agent_client.py:ro
    networks:
      - mcp-network
    depends_on:
      eda-servers:
        condition: service_healthy
    restart: unless-stopped
    # Updated health check for stdio mode MCP server
    healthcheck:
      test: ["CMD", "python3", "-c", "import sys; sys.path.append('/app/server/mcp'); import mcp_eda_server; print('MCP server healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  eda-servers:
    build:
      context: .
      dockerfile: docker/Dockerfile.servers
    ports:
      - "13333:13333"  # Synthesis Server
      - "13338:13338"  # CTS Server
      - "13340:13340"  # Unified Placement Server (Floorplan + Powerplan + Placement)
      - "13341:13341"  # Unified Route Save Server (Routing + Save)
    environment:
      - EDA_TOOLS_HOST=${EDA_TOOLS_HOST:-host.docker.internal}
      - SYNOPSYS_ROOT=${SYNOPSYS_ROOT:-/opt/synopsys}
      - CADENCE_ROOT=${CADENCE_ROOT:-/opt/cadence}
      - SNPSLMD_LICENSE_FILE=${SNPSLMD_LICENSE_FILE}
      - CDS_LIC_FILE=${CDS_LIC_FILE}
      - PYTHONPATH=/app
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_ROOT=/app/logs
      - SYNTH_SERVER_PORT=13333
      - UNIFIED_PLACEMENT_SERVER_PORT=13340
      - CTS_SERVER_PORT=13338
      - UNIFIED_ROUTE_SAVE_SERVER_PORT=13341
    volumes:
      - ./designs:/app/designs
      - ./config:/app/config:ro
      - ./libraries:/app/libraries:ro
      - ./scripts:/app/scripts:ro
      - ./logs:/app/logs
      - ./deliverables:/app/deliverables
      - ./exp_v1:/app/exp_v1:ro
      # Mount EDA tools if available locally
      - ${SYNOPSYS_ROOT:-/opt/synopsys}:${SYNOPSYS_ROOT:-/opt/synopsys}:ro
      - ${CADENCE_ROOT:-/opt/cadence}:${CADENCE_ROOT:-/opt/cadence}:ro
    networks:
      - mcp-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Starting MCP EDA servers...' &&
        echo 'Synth Server on port 13333' &&
        python3 server/synth_server.py &
        echo 'Unified Placement Server on port 13340' &&
        python3 server/unified_placement_server.py &
        echo 'CTS Server on port 13338' &&
        python3 server/cts_server.py &
        echo 'Unified Route Save Server on port 13341' &&
        python3 server/unified_route_save_server.py &
        echo 'All servers started, waiting...' &&
        wait
      "
    healthcheck:
      test: ["CMD", "python3", "docker/health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  experiment-runner:
    build:
      context: .
      dockerfile: docker/Dockerfile.experiment
    environment:
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_ROOT=/app/logs
    volumes:
      - ./designs:/app/designs:ro
      - ./config:/app/config:ro
      - ./exp_v1:/app/exp_v1
      - ./logs:/app/logs
      - ./deliverables:/app/deliverables
    networks:
      - mcp-network
    depends_on:
      eda-servers:
        condition: service_healthy
    restart: "no"
    profiles:
      - experiment

  test-runner:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    environment:
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_ROOT=/app/logs
      - MCP_AGENT_URL=http://mcp-agent-client:8000
      - EDA_SERVERS_URL=http://eda-servers:13333
      - SYNTH_SERVER_URL=http://eda-servers:13333
      - UNIFIED_PLACEMENT_SERVER_URL=http://eda-servers:13340
      - CTS_SERVER_URL=http://eda-servers:13338
      - UNIFIED_ROUTE_SAVE_SERVER_URL=http://eda-servers:13341
    volumes:
      - ./designs:/app/designs:ro
      - ./config:/app/config:ro
      - ./tests:/app/tests
      - ./logs:/app/logs
    networks:
      - mcp-network
    depends_on:
      mcp-agent-client:
        condition: service_healthy
      eda-servers:
        condition: service_healthy
    restart: "no"
    profiles:
      - test

networks:
  mcp-network:
    driver: bridge

volumes:
  logs:
  deliverables: 